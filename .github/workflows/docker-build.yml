# Creates a Docker image and pushes it to Github Container Reigistry
name: Docker build

on:
  push:
    branches: ["main"]
  #  paths:
  #    - 'studentOppgaver/**'  # Only runs when it detects new changes in the folder studentOppgaver/
  
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    # Commit message needs to contain "ny studentoppgave" to continue workflow
    if: contains(github.event.head_commit.message, 'ny studentoppgave') 
    outputs:
      studentFolderName: ${{ steps.extract_folder.outputs.studentFolderName }}
      imageName: ${{ steps.set-image.outputs.imageName }}
      database: ${{ steps.database.outputs.database }}
      access: ${{ steps.check_access.outputs.access }}
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v2

      # Step 2: Gets the foldername from the commit message
      - name: Extract Folder Name
        id: extract_folder
        run: |
          if [[ "${{ github.event.head_commit.message }}" =~ ny\ studentoppgave\ ([a-zA-Z0-9_-]+) ]]; then
            FOLDER_NAME=${BASH_REMATCH[1]}
            echo "STUDENT_FOLDER=$FOLDER_NAME" >> $GITHUB_ENV
            echo "Processing folder: $FOLDER_NAME"
            echo "studentFolderName=$FOLDER_NAME" >> "$GITHUB_OUTPUT"
          else
            echo "Commit message does not specify a student folder. Exiting."
            exit 1
          fi
      
      # Step 3: Checks if folder actually exists
      - name: Check Folder Existence
        id: folder_existence
        run: |
          if [[ ! -e ./studentOppgaver/${{env.STUDENT_FOLDER}} ]]; then
            echo "Fant ikke \"${{env.STUDENT_FOLDER}}\"" 
            exit 1
          fi 

      # Step 4: Check access
      - name: Check access
        id: check_access
        run: |
          msg="${{ github.event.head_commit.message}}"
          access=$(echo "$msg" | awk '{print $4}')
          if [[ "$access" == "private" ]]; then
            echo "access=private" >> $GITHUB_OUTPUT
          elif [[ "$access" == "public" ]]; then
            echo "access=public" >> $GITHUB_OUTPUT
          else
            echo "No access parameter found"
            exit 1
          fi

    

      # Step 5: Convert gitHub repository owner to Lowercase (Docker image requires lowercase name)
      - name: Convert Repo Owner to Lowercase
        run: echo "REPO_OWNER=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      # Step 4: Convert folder name to lowercase for Docker image
      - name: Set Docker Image Name
        id: set-image
        run: |
          DOCKER_IMAGE_NAME="ghcr.io/${{ env.REPO_OWNER }}/$(echo ${{ env.STUDENT_FOLDER }} | tr '[:upper:]' '[:lower:]')-app:latest"
          echo "DOCKER_IMAGE_NAME=ghcr.io/${{ env.REPO_OWNER }}/$(echo ${{ env.STUDENT_FOLDER }} | tr '[:upper:]' '[:lower:]')-app:latest" >> $GITHUB_ENV
          echo "imageName=$DOCKER_IMAGE_NAME" >> "$GITHUB_OUTPUT"

      # Step 6: Logs in to GitHub Container Registry (GHCR)
      - name: Docker Login to GHCR
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ env.REPO_OWNER }}" --password-stdin

      # Step 7: Build and push Docker image to GHCR
      - name: Build and Push Docker Image
        run: |
          SUBMISSION_DIR="studentOppgaver/${{ env.STUDENT_FOLDER }}"  # Preserve original case
          
          echo "Building Docker image: ${{ env.DOCKER_IMAGE_NAME }} from $SUBMISSION_DIR"
          docker build -t "${{ env.DOCKER_IMAGE_NAME }}" "$SUBMISSION_DIR"

          echo "Pushing Docker image: ${{ env.DOCKER_IMAGE_NAME }}"
          docker push "${{ env.DOCKER_IMAGE_NAME }}"

      # Step 8: Check if student program has a database
      - name: sjekk database
        id: database
        run: |
          if [[ -e ./studentOppgaver/${{env.STUDENT_FOLDER}}/database ]]; then 
            echo "DATABASE=true" >> $GITHUB_ENV;
            echo "database=true" >> "$GITHUB_OUTPUT" 
          else 
            echo "DATABASE=false" >> $GITHUB_ENV
            echo "database=false" >> "$GITHUB_OUTPUT"; fi

    
  startWF:
    needs: build-and-push
    uses: jhvalhei/IT-driftsmiljo/.github/workflows/buildTerraform.yml@main
    secrets: inherit
    with:
      STUDENT_FOLDER: ${{needs.build-and-push.outputs.studentFolderName}}
      DOCKER_IMAGE_NAME: ${{needs.build-and-push.outputs.imageName}}
      DATABASE: ${{needs.build-and-push.outputs.database}}
      TYPE: ny
      ACCESS: ${{needs.build-and-push.outputs.access}}